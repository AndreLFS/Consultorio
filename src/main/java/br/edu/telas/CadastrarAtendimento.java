/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.edu.telas;

import br.edu.DAO.AtendimentoDAO;
import br.edu.DAO.ClienteDAO2;
import br.edu.DAO.MedicoDAO;
import br.edu.DAO.ProntuarioDAO;
import br.edu.anotacoes.Atendimento;
import br.edu.anotacoes.Cliente;
import br.edu.anotacoes.Medico;
import br.edu.anotacoes.Prontuario;
import br.edu.util.ControleTelas;
import br.edu.util.TestesAtendimento;
import br.edu.util.Validacao;
import java.awt.Color;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import org.jdesktop.swingx.border.DropShadowBorder;

/**
 *
 * @author cra-dti-04
 */
public class CadastrarAtendimento extends javax.swing.JFrame {
    Atendimento atendimento;
    Medico medico;
    Cliente cliente;
    Prontuario prontuario;
    String mensagem;
    /**
     * Creates new form CadastrarAtendimento
     */
    public CadastrarAtendimento() {
        initComponents();
        atendimento = new Atendimento();
        this.prontuario = new Prontuario();
        mensagem = "Atendimento cadastrado com sucesso";
        ControleTelas.telaCadastroAtendimento = true;
        passarMedicos();
        passarClientes();
        
        AutoCompleteDecorator.decorate(jC_medicos);
        AutoCompleteDecorator.decorate(jC_clientes);
    }
    public CadastrarAtendimento(Atendimento atendimento) {
        initComponents();
        ControleTelas.telaCadastroAtendimento = true;
        this.atendimento = atendimento;
        this.cliente = atendimento.getCliente();
        this.medico = atendimento.getMedico();
        this.prontuario = atendimento.getProntuario();
        mensagem = "Atendimento editado com sucesso";
        passarMedicos();
        passarClientes();
        localizarClientes();
        localizarHora();
        localizarMedicos();
        jFT_data.setText(validar.converterData(atendimento.getData()));
        jL_cadastrar1.setText("Editar");
        AutoCompleteDecorator.decorate(jC_medicos);
        AutoCompleteDecorator.decorate(jC_clientes);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jP_container = new javax.swing.JPanel();
        jC_medicos = new javax.swing.JComboBox<>();
        jC_clientes = new javax.swing.JComboBox<>();
        jL_data = new javax.swing.JLabel();
        jC_idCliente = new javax.swing.JComboBox<>();
        jL_hora = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jFT_data = new javax.swing.JFormattedTextField();
        jP_cancelar = new javax.swing.JPanel();
        jL_cancelar = new javax.swing.JLabel();
        jP_cadastrar = new javax.swing.JPanel();
        jL_cadastrar1 = new javax.swing.JLabel();
        jC_idMedicos = new javax.swing.JComboBox<>();
        jP_conteudo = new javax.swing.JPanel();
        jL_cliente1 = new javax.swing.JLabel();
        jL_medicos1 = new javax.swing.JLabel();
        jP_cabeçalho = new javax.swing.JPanel();
        jL_consultas = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_container.setBackground(new java.awt.Color(0, 153, 153));
        jP_container.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jC_medicos.setEditable(true);
        jC_medicos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jC_medicos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jC_medicosActionPerformed(evt);
            }
        });
        jP_container.add(jC_medicos, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 60, -1, 30));

        jC_clientes.setEditable(true);
        jC_clientes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jP_container.add(jC_clientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 60, 150, 30));

        jL_data.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jL_data.setForeground(new java.awt.Color(255, 255, 255));
        jL_data.setText("Data");
        jP_container.add(jL_data, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 100, 50, 20));

        jC_idCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jP_container.add(jC_idCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 60, -1, 30));

        jL_hora.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jL_hora.setForeground(new java.awt.Color(255, 255, 255));
        jL_hora.setText("Hora");
        jP_container.add(jL_hora, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 100, 90, 20));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8", "9", "10", "11", "14", "15", "16", "17" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jP_container.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 130, 130, 30));

        jFT_data.setBorder(null);
        try {
            jFT_data.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFT_data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFT_dataActionPerformed(evt);
            }
        });
        jP_container.add(jFT_data, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 130, 150, 30));

        jP_cancelar.setBackground(new java.awt.Color(36, 47, 65));
        jP_cancelar.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jP_cancelarMouseMoved(evt);
            }
        });
        jP_cancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jP_cancelarMouseClicked(evt);
            }
        });
        jP_cancelar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jL_cancelar.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jL_cancelar.setForeground(new java.awt.Color(255, 255, 255));
        jL_cancelar.setText("Cancelar");
        jL_cancelar.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jL_cancelarMouseMoved(evt);
            }
        });
        jL_cancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jL_cancelarMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jL_cancelarMouseExited(evt);
            }
        });
        jP_cancelar.add(jL_cancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        jP_container.add(jP_cancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 210, 150, 40));

        jP_cadastrar.setBackground(new java.awt.Color(36, 47, 65));
        jP_cadastrar.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jP_cadastrarMouseMoved(evt);
            }
        });
        jP_cadastrar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jL_cadastrar1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jL_cadastrar1.setForeground(new java.awt.Color(255, 255, 255));
        jL_cadastrar1.setText("Cadastrar ");
        jL_cadastrar1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jL_cadastrar1MouseMoved(evt);
            }
        });
        jL_cadastrar1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jL_cadastrar1MouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jL_cadastrar1MouseExited(evt);
            }
        });
        jP_cadastrar.add(jL_cadastrar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jP_container.add(jP_cadastrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 210, 130, 40));

        jC_idMedicos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jP_container.add(jC_idMedicos, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 70, -1, -1));

        jP_conteudo.setBackground(new java.awt.Color(153, 153, 153));
        jP_conteudo.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        jP_conteudo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jL_cliente1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jL_cliente1.setForeground(new java.awt.Color(255, 255, 255));
        jL_cliente1.setText("Paciente");
        jP_conteudo.add(jL_cliente1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 10, 90, 20));

        jL_medicos1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jL_medicos1.setForeground(new java.awt.Color(255, 255, 255));
        jL_medicos1.setText("Médico");
        jP_conteudo.add(jL_medicos1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, 90, 20));

        jP_container.add(jP_conteudo, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, 480, 170));

        getContentPane().add(jP_container, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 590, 280));

        jP_cabeçalho.setBackground(new java.awt.Color(36, 47, 65));
        jP_cabeçalho.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jL_consultas.setFont(new java.awt.Font("Century Gothic", 1, 36)); // NOI18N
        jL_consultas.setForeground(new java.awt.Color(255, 255, 255));
        jL_consultas.setText("Consultas");
        jP_cabeçalho.add(jL_consultas, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 370, 44));

        getContentPane().add(jP_cabeçalho, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, 600, 60));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void jFT_dataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFT_dataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFT_dataActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jC_medicosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jC_medicosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jC_medicosActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        fechar();
    }//GEN-LAST:event_formWindowClosing

    private void jL_cancelarMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jL_cancelarMouseMoved
        jP_cancelar.setBorder(efeitoBorda());
    }//GEN-LAST:event_jL_cancelarMouseMoved

    private void jL_cancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jL_cancelarMouseClicked
        if(JOptionPane.showConfirmDialog(null, "Deseja realmente fechar?")==0){
            ControleTelas.telaCadastroAtendimento = false;
            this.dispose();
        }
    }//GEN-LAST:event_jL_cancelarMouseClicked

    private void jL_cancelarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jL_cancelarMouseExited
        efeitoBordaCancelar(jP_cancelar);
    }//GEN-LAST:event_jL_cancelarMouseExited

    private void jP_cancelarMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jP_cancelarMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_jP_cancelarMouseMoved

    private void jL_cadastrar1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jL_cadastrar1MouseMoved
        jP_cadastrar.setBorder(efeitoBorda());
    }//GEN-LAST:event_jL_cadastrar1MouseMoved

    private void jL_cadastrar1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jL_cadastrar1MouseClicked
        // TODO add your handling code here:
        if(testes()){
            salvar();
        }
    }//GEN-LAST:event_jL_cadastrar1MouseClicked

    private void jL_cadastrar1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jL_cadastrar1MouseExited
        efeitoBordaCancelar(jP_cadastrar);
    }//GEN-LAST:event_jL_cadastrar1MouseExited

    private void jP_cadastrarMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jP_cadastrarMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_jP_cadastrarMouseMoved

    private void jP_cancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jP_cancelarMouseClicked
        // TODO add your handling code here:
         if(JOptionPane.showConfirmDialog(null, "Deseja realmente fechar?")==0){
            ControleTelas.telaCadastroAtendimento = false;
            this.dispose();
        }
    }//GEN-LAST:event_jP_cancelarMouseClicked
    
    MedicoDAO medicoDAO = new MedicoDAO();
    ClienteDAO2 clienteDAO2 = new ClienteDAO2();
    Validacao validar = new Validacao();
    private boolean testes(){
       if (jFT_data.getText().equals("  /  /    ") && validar.converterIdade(jFT_data.getText())== null) {
            JOptionPane.showMessageDialog(null, "Data em branco ou invalida");
            return false;
            //teste se a data que esta querendo ser cadastrada é igual a do dia atual
        }else if( validar.converterIdade(jFT_data.getText()).compareTo(validar.converterIdade(java.text.DateFormat.getDateInstance(DateFormat.MEDIUM).format(new Date()))) == 0){
           //se a data for igual, testa-se a se a hora é maior que a atuaç
            GregorianCalendar calendar = new GregorianCalendar();
            if(calendar.get(calendar.HOUR_OF_DAY) >= Integer.parseInt(jComboBox1.getSelectedItem().toString())){
                JOptionPane.showMessageDialog(null, "Hora do exame tem que ser maior do que a atual");
                return false;
            }else{
                return true;
            }    
        }else if( validar.converterIdade(jFT_data.getText()).compareTo(validar.converterIdade(java.text.DateFormat.getDateInstance(DateFormat.MEDIUM).format(new Date()))) < 0){
            JOptionPane.showMessageDialog(null, "Data anterior a Atual!");
            return false;
        }else if(jC_medicos.getSelectedIndex() == -1){
            if (localizarNomeMedicos()) {
                medico = medicoLocalizar;
           } else {
                JOptionPane.showMessageDialog(null, "Medico não existe, por favor selecione um valido");
           }
            return false;
        }else if(jC_clientes.getSelectedIndex() == -1){
           if (localizarNomeClientes()) {
                cliente = clienteLocalizar;
           } else {
                JOptionPane.showMessageDialog(null, "Cliente não existe, por favor selecione um valido");
           }
            return false;
        }else{
            return true;
        }
    }
       
    private void salvar(){
        if (testes()) {
            AtendimentoDAO atendimentoDAO = new AtendimentoDAO();
            if (medicoLocalizar == null) {
                this.medico = (medicoDAO.listarCampos("id", Integer.parseInt(jC_idMedicos.getItemAt(jC_medicos.getSelectedIndex()))).get(0));
            }
            if (clienteLocalizar == null) {
                this.cliente = (clienteDAO2.listarCampos("id", Integer.parseInt(jC_idCliente.getItemAt(jC_clientes.getSelectedIndex()))).get(0));
            }
            if(TestesAtendimento.testeAtendimento(medico, cliente, validar.converterIdade(jFT_data.getText()), Integer.parseInt(jComboBox1.getSelectedItem().toString()))) {
                atendimento.setCliente(cliente);
                atendimento.setData(validar.converterIdade(jFT_data.getText()));
                atendimento.setMedico(medico);
                atendimento.setHoraConsulta(Integer.parseInt(jComboBox1.getSelectedItem().toString()));
                atendimento.setProntuario(this.prontuario);
                try {
                    if(this.atendimento.getProntuario().getId() == 0){
                        ProntuarioDAO prontuarioDAO = new ProntuarioDAO();
                        prontuarioDAO.salvar(prontuario);
                        
                    }
                    atendimentoDAO.salvar(atendimento);
                    JOptionPane.showMessageDialog(null, mensagem);
                    fechar();
                    this.dispose();
                } catch (Exception e) {
                    System.out.println("Erro " + e);
                }
            }
        
        }
}
    List<Medico> medicos= medicoDAO.listar();
    private void passarMedicos(){
        
        jC_medicos.removeAllItems();
        jC_idMedicos.removeAllItems();
        jC_idMedicos.setVisible(false);
        for (int i = 0; i < medicos.size(); i++) {
            jC_medicos.addItem(medicos.get(i).getNome());
            jC_idMedicos.addItem(String.valueOf(medicos.get(i).getId()));
        }
    }
    
    private void localizarMedicos(){
        for (int i = 0; i < medicos.size(); i++) {
            if (medico.getId() == medicos.get(i).getId()) {
                jC_medicos.setSelectedIndex(i);
            }
        }
    }
    Medico medicoLocalizar = null;
    private boolean localizarNomeMedicos(){
        for (int i = 0; i < medicos.size(); i++) {
            if (jC_medicos.getSelectedItem().toString().equals(medicos.get(i).getNome())) {
                medicoLocalizar = medicos.get(i);
                return true;
            }
        }
        return false;
    }
    
    List<Cliente> clientes= clienteDAO2.listar();
    private void passarClientes(){
        jC_clientes.removeAllItems();
        jC_idCliente.removeAllItems();
        jC_idCliente.setVisible(false);
        for (int i = 0; i < clientes.size(); i++) {
            jC_clientes.addItem(clientes.get(i).getNome());
            jC_idCliente.addItem(String.valueOf(clientes.get(i).getId()));
        }
    } 
    private void localizarClientes(){
        for (int i = 0; i < clientes.size(); i++) {
            if (cliente.getId() == clientes.get(i).getId()) {
                jC_clientes.setSelectedIndex(i);
            }
        }
    }
    Cliente clienteLocalizar = null;
    private boolean localizarNomeClientes(){
        for (int i = 0; i < clientes.size(); i++) {
            if (jC_clientes.getSelectedItem().toString().equals(clientes.get(i).getNome())) {
                clienteLocalizar = clientes.get(i);
                return true;
            }
        }
        return false;
    }
    
    private void localizarHora(){
        switch (atendimento.getHoraConsulta()){
            case 8:
                jComboBox1.setSelectedIndex(0);
                break;
            case 9:
                jComboBox1.setSelectedIndex(1);
                break;
            case 10:
                jComboBox1.setSelectedIndex(2);
                break;
            case 11:
                jComboBox1.setSelectedIndex(3);
                break;
            case 14:
                jComboBox1.setSelectedIndex(4);
                break;
            case 15:
                jComboBox1.setSelectedIndex(5);
                break;
            case 16:
                jComboBox1.setSelectedIndex(6);
                break;
            case 17:
                jComboBox1.setSelectedIndex(7);
                break;
        }
    }

    private void fechar(){
        ControleTelas.telaCadastroAtendimento = false;
        if (ControleTelas.telaListarAtendimento) {
            ListarAtendimento listarAtendimento = new ListarAtendimento();
            listarAtendimento.atualizarTabela();
        }
    }
    
    //codigo para colocar as sombras nos paineis
    private DropShadowBorder efeitoBorda(){
        DropShadowBorder shadow = new DropShadowBorder();
        shadow.setShadowColor(Color.black);
        shadow.setShadowSize(5);
        shadow.setShowLeftShadow(true);
        shadow.setShowRightShadow(true);
        shadow.setShowBottomShadow(true);
        shadow.setShowTopShadow(true);
        return shadow;
    }
    //codigo para cancelar a borda em todas os paineis
    private void efeitoBordaCancelar(javax.swing.JPanel painel){
        DropShadowBorder shadow = new DropShadowBorder();
        shadow.setShowLeftShadow(false);
        shadow.setShowRightShadow(false);
        shadow.setShowBottomShadow(false);
        shadow.setShowTopShadow(false);
        
        painel.setBorder(shadow);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastrarAtendimento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastrarAtendimento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastrarAtendimento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastrarAtendimento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastrarAtendimento().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jC_clientes;
    private javax.swing.JComboBox<String> jC_idCliente;
    private javax.swing.JComboBox<String> jC_idMedicos;
    private javax.swing.JComboBox<String> jC_medicos;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JFormattedTextField jFT_data;
    private javax.swing.JLabel jL_cadastrar1;
    private javax.swing.JLabel jL_cancelar;
    private javax.swing.JLabel jL_cliente1;
    private javax.swing.JLabel jL_consultas;
    private javax.swing.JLabel jL_data;
    private javax.swing.JLabel jL_hora;
    private javax.swing.JLabel jL_medicos1;
    private javax.swing.JPanel jP_cabeçalho;
    private javax.swing.JPanel jP_cadastrar;
    private javax.swing.JPanel jP_cancelar;
    private javax.swing.JPanel jP_container;
    private javax.swing.JPanel jP_conteudo;
    // End of variables declaration//GEN-END:variables
}
